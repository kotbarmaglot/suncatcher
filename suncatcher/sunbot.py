from .config import API_KEY, API_KEY2
from .vksunbot import get_moon, get_moon_amount, create_catalog_file
from .user import *
from .patch1 import patch1
from .db import insert_table_user, get_amount_suncatcher, sell_suncatcher, get_url_suncatcher
import telebot
import json
from telebot import types
import pathlib
from pathlib import Path
import os
import sys
from pprint import pprint


bot = telebot.TeleBot(API_KEY2)


def message_delete(message, type_del):
    if type_del == 'message':
        ms_id = get_message_id(message)
        if ms_id:
            bot.delete_message(message.from_user.id, ms_id)

    if type_del == 'media':
        med_id = get_media_id(message)
        if med_id:
            for elem in med_id:
                bot.delete_message(message.from_user.id, elem)

            save_media_id(message, del_media_id=1)


def save_message_id(message, type='photo'):
    if type == 'photo':
        user_id = message.chat.id
        user_patch = Path(f"suncatcher/user_file/{user_id}.json")

        with open(user_patch, "r") as read_file:
            user_data = json.load(read_file)

        user_data['id_mes'] = message.message_id

        with open(user_patch, "w") as write_file:
            json.dump(user_data, write_file)
    
    if type == 'message':
        user_id = message.chat.id
        user_patch = Path(f"suncatcher/user_file/{user_id}.json")

        with open(user_patch, "r") as read_file:
            user_data = json.load(read_file)

        user_data['id_mes_message'] = message.message_id

        with open(user_patch, "w") as write_file:
            json.dump(user_data, write_file)


def save_media_id(message, del_media_id=0):
    media = []

    if del_media_id == 0:
        for elem in message:
            media.append(elem.message_id)
            user_id = elem.chat.id

        user_patch = Path(f"suncatcher/user_file/{user_id}.json")

        with open(user_patch, "r") as read_file:
            user_data = json.load(read_file)
            user_data['id_media'] = media

        with open(user_patch, "w") as write_file:
            json.dump(user_data, write_file)

    if del_media_id == 1:
        user_id = message.from_user.id
        user_patch = Path(f"suncatcher/user_file/{user_id}.json")

        with open(user_patch, "r") as read_file:
            user_data = json.load(read_file)
            user_data['id_media'] = ''

        with open(user_patch, "w") as write_file:
            json.dump(user_data, write_file)


def get_media_id(message, type='photo'):
    user_id = message.from_user.id
    user_patch = Path(f"suncatcher/user_file/{user_id}.json")

    if not os.path.exists(user_patch):
        return False
    else:
        with open(user_patch, "r") as read_file:
            user_data = json.load(read_file)

            if user_data['id_media'] != '':
                return user_data['id_media']
            else:
                return False


def get_message_id(message):
    user_id = message.from_user.id
    user_patch = Path(f"suncatcher/user_file/{user_id}.json")

    if not os.path.exists(user_patch):
        return False
    else:
        with open(user_patch, "r") as read_file:
            user_data = json.load(read_file)
            return user_data['id_mes']


def set_current_size_sun(message, size):
    user_id = message.from_user.id
    user_patch = Path(f"suncatcher/user_file/{user_id}.json")

    with open(user_patch, "r") as read_file:
        user_data = json.load(read_file)
        user_data['current_size'] = size

    with open(user_patch, "w") as write_file:
        json.dump(user_data, write_file)


def set_current_number_sun(message, current, size):
    user_id = message.from_user.id
    user_patch = Path(f"suncatcher/user_file/{user_id}.json")

    with open(user_patch, "r") as read_file:
        user_data = json.load(read_file)

    user_data['catalog'][size]['current'] = current

    with open(user_patch, "w") as write_file:
        json.dump(user_data, write_file)


def get_current_number_size_sun(message):
    user_id = message.from_user.id
    user_patch = Path(f"suncatcher/user_file/{user_id}.json")

    with open(user_patch, "r") as read_file:
        user_data = json.load(read_file)

    current_size = user_data['current_size']
    current_number = user_data['catalog'][current_size]['current']
    all_size = user_data['catalog'][current_size]['all']

    return current_number, current_size, all_size


def create_or_get_user_file(message):
    user_id = message.from_user.id
    user_patch = Path(f"suncatcher/user_file/{user_id}.json")
    amount = get_moon_amount()

    user_data = {}
    user_data['id'] = user_id
    user_data['catalog'] = {}
    user_data['catalog']['big'] = {}
    user_data['catalog']['mid'] = {}
    user_data['catalog']['low'] = {}
    user_data['catalog']['big']['all'] = amount['big']
    user_data['catalog']['mid']['all'] = amount['mid']
    user_data['catalog']['low']['all'] = amount['low']
    user_data['catalog']['big']['current'] = 0
    user_data['catalog']['mid']['current'] = 0
    user_data['catalog']['low']['current'] = 0
    user_data['start'] = 1
    user_data['current_size'] = ''
    user_data["id_mes"] = 0
    user_data["id_media"] = ''
    user_data["id_mes_message"] = 0

    with open(user_patch, "w") as write_file:
        json.dump(user_data, write_file)

    return user_data


def show_catalog(message, step_pre=0):
    title = 'üåà‚òÄÔ∏è –ö–∞–∫–∏–µ –ª–æ–≤—Ü—ã —Å–æ–ª–Ω—Ü–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n\n'
    big_sun = '‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è <b>–ë–æ–ª—å—à–∏–µ –ª–æ–≤—Ü—ã </b> - –æ–±—â–µ–π –¥–ª–∏–Ω–æ–π 40 —Å–º –∏ –±–æ–ª—å—à–µ. C—Ç–æ–∏–º–æ—Å—Ç—å - 4000—Ä.\n\n'
    mid_sun = '‚òÄÔ∏è‚òÄÔ∏è <b>–°—Ä–µ–¥–Ω–∏–µ –ª–æ–≤—Ü—ã</b> ~ 30 —Å–º. C—Ç–æ–∏–º–æ—Å—Ç—å - 3000—Ä.\n\n'
    low_sun = '‚òÄÔ∏è <b>–ú–∞–ª—ã–µ –ª–æ–≤—Ü—ã</b> ~ 20 —Å–º. C—Ç–æ–∏–º–æ—Å—Ç—å - 2000—Ä.\n\n'

    text = f"{title}{big_sun}{mid_sun}{low_sun}"

    markup_inline = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton("‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è –ë–æ–ª—å—à–∏–µ ‚òÄÔ∏è‚òÄÔ∏è‚òÄÔ∏è", callback_data='big')
    item2 = types.InlineKeyboardButton("‚òÄÔ∏è‚òÄÔ∏è –°—Ä–µ–¥–Ω–∏–µ ‚òÄÔ∏è‚òÄÔ∏è", callback_data='mid')
    item3 = types.InlineKeyboardButton("‚òÄÔ∏è –ú–∞–ª—ã–µ ‚òÄÔ∏è", callback_data='low')

    url_photo = 'https://sun9-42.userapi.com/impg/V7H81niHXYdgP2M_ZqbL4lRvuwGQGajdTvkdYw/KqT-wWKWTHw.jpg?size=2560x2560&quality=95&sign=79eab711010666d1651f6001fdf322d9&type=album'

    markup_inline.add(item1)
    markup_inline.add(item2)
    markup_inline.add(item3)

    if step_pre == 'media':
        msg = bot.send_photo(message.from_user.id, url_photo, caption=text, reply_markup=markup_inline, parse_mode='HTML')
        save_message_id(msg)
    else:
        ms_id = get_message_id(message)
        bot.edit_message_media(chat_id=message.from_user.id, message_id=ms_id, media=types.InputMediaPhoto(url_photo, caption=text, parse_mode='HTML'), reply_markup=markup_inline)


def show_choose_size_suncatcher(message, number_sun, size, next_update=0, step_pre=0):
    sun = get_moon(size)

    current_number, type, all_sun = get_current_number_size_sun(message)

    url_photo = sun[size][number_sun]['url_photo'][0]
    count = f'{size}_count'
    current_sun_text = f'{current_number+1}/{sun[count]}'

    callback_data_back = 'back'
    callback_data_next = 'next'

    if current_number+1 == sun[count]:
        callback_data_next = 'none'

    if current_number+1 == 1:
        callback_data_back = 'none'

    markup_inline = types.InlineKeyboardMarkup()

    if message.from_user.id == 257930228:
        item7 = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–∞–Ω–æ', callback_data='sell_suncatcher')
        markup_inline.add(item7)

    item = types.InlineKeyboardButton(text='üí´ –û–ø–∏—Å–∞–Ω–∏–µ/–§–æ—Ç–æ', callback_data='more')
    item2 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data=callback_data_back)
    item3 = types.InlineKeyboardButton(text='‚û°Ô∏è', callback_data=callback_data_next)
    item6 = types.InlineKeyboardButton(text='üéÅ –ó–∞–∫–∞–∑–∞—Ç—å', callback_data='choose')
    item4 = types.InlineKeyboardButton(text='‚ú® –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog')
    item5 = types.InlineKeyboardButton(text=f'{current_sun_text}', callback_data='none')

    markup_inline.add(item2, item5, item3)
    markup_inline.add(item6)
    markup_inline.add(item)
    markup_inline.add(item4)

    if next_update == 0:
        if step_pre == 'media':
            message_delete(message, type_del='message')
            msg = bot.send_photo(message.from_user.id, url_photo,  reply_markup=markup_inline)
            save_message_id(msg)
        else:
            ms_id = get_message_id(message)
            bot.edit_message_media(chat_id=message.from_user.id, message_id=ms_id, media=types.InputMediaPhoto(url_photo), reply_markup=markup_inline)
    
    if next_update == 'next':
        ms_id = get_message_id(message)
        bot.edit_message_media(chat_id=message.from_user.id, message_id=ms_id,  media=types.InputMediaPhoto(url_photo), reply_markup=markup_inline)


def show_choose_size_suncatcher_more(message, number_sun, size):
    sun = get_moon(size)

    url_photo = sun[size][number_sun]['url_photo']
    description = sun[size][number_sun]['description'].replace('"–≤—ã–±—Ä–∞—Ç—å" ‚¨áÔ∏è —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å', 'üéÅ <b>–ó–∞–∫–∞–∑–∞—Ç—å</b>')

    media = []

    for url in url_photo:
        media.append(types.InputMediaPhoto(url))

    msg_med = bot.send_media_group(message.from_user.id, media)

    save_media_id(msg_med)

    markup_inline = types.InlineKeyboardMarkup()

    item = types.InlineKeyboardButton(text='üéÅ –ó–∞–∫–∞–∑–∞—Ç—å', callback_data='choose1')
    item2 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back1')
    item4 = types.InlineKeyboardButton(text='‚ú® –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog1')

    markup_inline.add(item)
    markup_inline.add(item2, item4)

    message_delete(message, type_del='message')

    msg = bot.send_message(message.from_user.id, text=description, reply_markup=markup_inline, parse_mode='HTML')

    save_message_id(msg)


def choose(message, number_sun, size, step_pre=0):
    sun = get_moon(size)

    url_photo = sun[size][number_sun]['url_photo'][0]

    text = 'üëç –î–ª—è –∑–∞–∫–∞–∑–∞ —ç—Ç–æ–≥–æ –ª–æ–≤—Ü–∞ —Å–æ–ª–Ω—Ü–∞ –Ω–∞–∂–º–∏—Ç–µ: \n\n‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å - —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º –∏ –ª–∏—á–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏.\n\nüéÅ –ó–∞–∫–∞–∑–∞—Ç—å - —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–∫–∞–∑–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.'

    markup_inline = types.InlineKeyboardMarkup()

    item = types.InlineKeyboardButton(text='‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å', url='https://t.me/Lunar_room')
    item2 = types.InlineKeyboardButton(text='üéÅ –ó–∞–∫–∞–∑–∞—Ç—å', callback_data='orderbot')
    item3 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
    item4 = types.InlineKeyboardButton(text='‚ú® –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog')

    markup_inline.add(item, item2)
    markup_inline.add(item3, item4)

    if step_pre == 'media':
        message_delete(message, type_del='message')
        msg = bot.send_photo(message.from_user.id, url_photo, caption=text, reply_markup=markup_inline)
        save_message_id(msg)
    else:
        ms_id = get_message_id(message)
        bot.edit_message_media(chat_id=message.from_user.id, message_id=ms_id, media=types.InputMediaPhoto(url_photo, caption=text), reply_markup=markup_inline)

    # bot.send_photo(-1001976282334, url_photo, caption=description)
    chat = bot.get_chat(message.from_user.id)
    print('!!!!!!!!!!!!!!!\n\n', chat)
    chat_id = str(chat.id)

    chat_username = '@' + chat.username if chat.username else 'none'

    chat_firstname = chat.first_name if chat.first_name else 'none'

    chat_lastname = chat.last_name if chat.last_name else 'none'

    send_text_chat = 'id: ' + chat_id + '\n' + 'username: ' + chat_username + '\n' + '–ò–º—è: ' + chat_firstname + '\n' + '–§–∞–º–∏–ª–∏—è: ' + chat_lastname

    # bot.send_message(-1001976282334, text=send_text_chat)


def step_adress(message):
    order_sun_via_bot(message, step='details_pay')
    bot.delete_message(message.chat.id, message.message_id)


def order_sun_via_bot(message, step):
    number, size, all = get_current_number_size_sun(message)
    sun = get_moon(size)

    if size == 'big' or 'mid':
        cost_ship = '350 —Ä—É–±–ª–µ–π'
        size_sun = '–±–æ–ª—å—à–∏—Ö –∏ —Å—Ä–µ–¥–Ω–∏—Ö'
    else:
        cost_ship = '300 —Ä—É–±–ª–µ–π'
        size_sun = '–º–∞–ª—ã—Ö'

    url_photo = sun[size][number]['url_photo'][0]

    if step == 'orderbot':
        script_one_step = '–≠—Ç–æ—Ç –ª–æ–≤–µ—Ü —Å–æ–ª–Ω—Ü–∞ –≤ –Ω–∞–ª–∏—á–∏–∏. \n\n<b>–í—ã –¥–ª—è —Å–µ–±—è –µ–≥–æ –≤—ã–±—Ä–∞–ª–∏ –∏–ª–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫?</b> '

        markup_inline = types.InlineKeyboardMarkup()

        item = types.InlineKeyboardButton(text='üíÅ‚Äç‚ôÄÔ∏è –î–ª—è —Å–µ–±—è', callback_data='forme')
        item2 = types.InlineKeyboardButton(text='üéÅ –í –ø–æ–¥–∞—Ä–æ–∫', callback_data='forgift')
        item3 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back2')
        item4 = types.InlineKeyboardButton(text='‚ú® –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog')

        markup_inline.add(item, item2)
        markup_inline.add(item3, item4)

        ms_id = get_message_id(message)

        bot.edit_message_media(chat_id=message.from_user.id, message_id=ms_id,  media=types.InputMediaPhoto(url_photo, caption=script_one_step, parse_mode='HTML'), reply_markup=markup_inline)
    
    if step == 'forme':
        script_one_step = f'üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è {size_sun} –ª–æ–≤—Ü–æ–≤ —Å—Ç–æ–∏—Ç {cost_ship}. \n\nüì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å. \n\nüí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫ –∏–ª–∏ –¢–∏–Ω—å–∫–æ—Ñ. \n\n<b>–í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?</b>'

        markup_inline = types.InlineKeyboardMarkup()

        item = types.InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='input_adress')
        item2 = types.InlineKeyboardButton(text='‚õîÔ∏è –ù–µ—Ç. –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º', url='https://t.me/Lunar_room')

        markup_inline.add(item)
        markup_inline.add(item2)

        ms_id = get_message_id(message)

        bot.edit_message_media(chat_id=message.from_user.id, message_id=ms_id,  media=types.InputMediaPhoto(url_photo, caption=script_one_step, parse_mode='HTML'), reply_markup=markup_inline)

    
    if step == 'forgift':
        script_one_step = f'üéÅ –õ–æ–≤–µ—Ü —Å–æ–ª–Ω—Ü–∞ –ø—Ä–∏–¥—ë—Ç –∫ –≤–∞–º –≤ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ. –ö –∑–∞–∫–∞–∑—É —è –ø—Ä–∏–ª–æ–∂—É –æ—Ç–∫—Ä—ã—Ç–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–∞–º–∏ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å. –ò –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –≤—Ä—É—á–µ–Ω–∏—é)\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è {size_sun} –ª–æ–≤—Ü–æ–≤ —Å—Ç–æ–∏—Ç {cost_ship}. \n\nüì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å. \n\nüí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫ –∏–ª–∏ –¢–∏–Ω—å–∫–æ—Ñ. \n\n<b>–í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?</b>'

        markup_inline = types.InlineKeyboardMarkup()

        item = types.InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='input_adress')
        item2 = types.InlineKeyboardButton(text='‚õîÔ∏è –ù–µ—Ç. –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º', url='https://t.me/Lunar_room')

        markup_inline.add(item)
        markup_inline.add(item2)

        ms_id = get_message_id(message)

        bot.edit_message_media(chat_id=message.from_user.id, message_id=ms_id,  media=types.InputMediaPhoto(url_photo, caption=script_one_step, parse_mode='HTML'), reply_markup=markup_inline)


    if step == 'input_adress':
        script_one_step = '<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> '
        markup_inline = types.InlineKeyboardMarkup()

        ms_id = get_message_id(message)

        msg = bot.edit_message_media(chat_id=message.from_user.id, message_id=ms_id,  media=types.InputMediaPhoto(url_photo, caption=script_one_step, parse_mode='HTML'))

        bot.register_next_step_handler(msg, step_adress)


    if step == 'details_pay':
        adress = message.json['text']
        details_pay = 'üëç –•–æ—Ä–æ—à–æ. –î–æ—Å—Ç–∞–≤–∫–∞ 300—Ä + —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≤—Ü–∞ —Å–æ–ª–Ω—Ü–∞ 2000—Ä. –ò—Ç–æ–≥–æ 2300—Ä. –û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ –∏–ª–∏ –°–±–µ—Ä–±–∞–Ω–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 89180119741 –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –û–∫—Å–∞–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞ –ò.\n\n'
        script_one_step =  f'{details_pay}–í–∞—à –∞–¥—Ä–µ—Å: {adress}. \n\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ –æ–ø–ª–∞—Ç–∏–ª(a). –í —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –≤–∞–º –ø—Ä–∏–¥–µ—Ç –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏' 

        markup_inline = types.InlineKeyboardMarkup()

        item = types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏–ª(–∞)', callback_data='none')
        item2 = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–æ–º–µ—Ä', callback_data='none')

        markup_inline.add(item)
        markup_inline.add(item2)

        ms_id = get_message_id(message)

        bot.edit_message_media(chat_id=message.from_user.id, message_id=ms_id, media=types.InputMediaPhoto(url_photo, caption=script_one_step), reply_markup=markup_inline)


@bot.message_handler(commands=['start'])
def start(message):

    insert_table_user(message)
    get_amount_suncatcher()

    bot.delete_message(message.from_user.id, message.message_id)

    # create_user_file(message)

    try:
        message_delete(message, type_del='message')
        message_delete(message, type_del='media')

    except Exception:
        create_or_get_user_file(message)

    create_or_get_user_file(message)

    user_name = message.from_user.first_name if message.from_user.first_name else message.from_user.username

    text_message = f'–ü—Ä–∏–≤–µ—Ç, {user_name}! \n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –ª–æ–≤—Ü–∞–º–∏ —Å–æ–ª–Ω—Ü–∞ üåà‚ú®\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å –Ω–∞–ª–∏—á–∏–µ.\n\n–ê –µ—Å–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ —Ü–≤–µ—Ç–æ—á–Ω—É—é –ª—É–Ω—É –ø–æ –¥—É—à–µ, —Ç–æ —á–∞—Ç-–±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –ª–æ–≤–µ—Ü —Å–æ–ª–Ω—Ü–∞.'

    url_photo = Path("suncatcher/admin_file/oksa.jpg")
    img = open(url_photo, 'rb')
    markup_inline = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton(text='‚ú® –ö–∞—Ç–∞–ª–æ–≥', callback_data='catalog')
    markup_inline.add(item1)

    msg = bot.send_photo(message.from_user.id, img, caption=text_message, reply_markup=markup_inline)

    save_message_id(msg)


@bot.callback_query_handler(func=lambda m: True)
def callback_choice(message):
    t = message.data

    if t == 'catalog':
        set_current_size_sun(message, size='')
        show_catalog(message)
        set_current_number_sun(message, current=0, size='big')
        set_current_number_sun(message, current=0, size='mid')
        set_current_number_sun(message, current=0, size='low')

    if t == 'catalog1':
        message_delete(message, type_del='message')
        message_delete(message, type_del='media')
        set_current_size_sun(message, size='')
        show_catalog(message, step_pre='media')
        set_current_number_sun(message, current=0, size='big')
        set_current_number_sun(message, current=0, size='mid')
        set_current_number_sun(message, current=0, size='low')

    if t == 'big':
        set_current_size_sun(message, t)
        show_choose_size_suncatcher(message, number_sun=0, size=t, next_update=0)

    if t == 'mid':
        set_current_size_sun(message, t)
        show_choose_size_suncatcher(message, number_sun=0, size=t, next_update=0)

    if t == 'low':
        set_current_size_sun(message, t)
        show_choose_size_suncatcher(message, number_sun=0, size=t, next_update=0)

    if t == 'next':
        number, size, all = get_current_number_size_sun(message)
        set_current_number_sun(message, current=number+1, size=size)
        show_choose_size_suncatcher(message, number_sun=number+1, size=size, next_update='next')

    if t == 'back':
        number, size, all = get_current_number_size_sun(message)
        set_current_number_sun(message, current=number-1, size=size)
        show_choose_size_suncatcher(message, number_sun=number-1, size=size, next_update='next')

    if t == 'more':
        number, size, all = get_current_number_size_sun(message)
        show_choose_size_suncatcher_more(message, number_sun=number, size=size)

    if t == 'choose':
        number, size, all = get_current_number_size_sun(message)
        # message_delete(message, type_del='media')
        choose(message, number_sun=number, size=size)

# –ö–æ–≥–¥–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫, –º–µ—Ç–æ–¥ edit_message –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ü–æ—ç—Ç–æ–º—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ. –≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º step_pre.
    if t == 'choose1':
        number, size, all = get_current_number_size_sun(message)
        message_delete(message, type_del='media')
        choose(message, number_sun=number, size=size, step_pre='media')

    if t == 'back1':
        message_delete(message, type_del='media')
        number, size, all = get_current_number_size_sun(message)
        set_current_number_sun(message, current=number, size=size)
        show_choose_size_suncatcher(message, number_sun=number, size=size, step_pre='media')

    if t == 'back2':
        number, size, all = get_current_number_size_sun(message)
        set_current_number_sun(message, current=number, size=size)
        show_choose_size_suncatcher(message, number_sun=number, size=size)

    if t == 'orderbot':
        order_sun_via_bot(message, step=t)

    if t == 'forme':
        order_sun_via_bot(message, step=t)

    if t == 'forgift':
        order_sun_via_bot(message, step=t)

    if t == 'input_adress':
        order_sun_via_bot(message, step=t)

    if t == 'sell_suncatcher':
        sell_suncatcher()


@bot.message_handler(func=lambda m: True)
def handler(message):
    pass


bot.infinity_polling()


def main():
    pass


if __name__ == '__main__':
    main()